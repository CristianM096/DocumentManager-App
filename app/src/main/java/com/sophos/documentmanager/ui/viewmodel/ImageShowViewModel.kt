package com.sophos.documentmanager.ui.viewmodel

import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.util.Base64
import android.util.Log
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.sophos.documentmanager.domain.GetAttachmentUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class ImageShowViewModel @Inject constructor(
    private val getAttachmentUseCase: GetAttachmentUseCase
) : ViewModel(){

    val _currentImage = MutableLiveData<String>()
    val currentImage: LiveData<String> = _currentImage
    val defaultImage: String = ""
    val _state = MutableLiveData<Boolean>()
    val state: LiveData<Boolean> = _state
    private val _isLoading = MutableLiveData<Boolean>()
    val isLoading: LiveData<Boolean> = _isLoading

    init {
        _currentImage.value = defaultImage
    }
    fun getAttachment(idAttachment:String){
        _isLoading.value = true
        viewModelScope.launch {
            val attachment = getAttachmentUseCase(idAttachment)
            if(attachment != null){
                try {
                    val imageDecoded = decodeBase64(attachment.attachment)
                    _currentImage.value = attachment.attachment
                }catch (e: java.lang.Exception){
                    _currentImage.value = defaultImage
                }
                _state.value = true
            }
            _isLoading.value = false
        }
    }
    fun decodeBase64(imageBase64:String ): Bitmap
    {
        val decodeString = Base64.decode(imageBase64, Base64.DEFAULT)
        val decodedByte = BitmapFactory.decodeByteArray(decodeString, 0, decodeString.size)
        return decodedByte
    }
    fun defaultImageBuild() : Bitmap{
        return BitmapFactory.decodeByteArray(Base64.decode(defaultImage,Base64.DEFAULT),0,Base64.decode(defaultImage,Base64.DEFAULT).size)
    }
    fun changeImageState(){
        _state.value = false
    }
}